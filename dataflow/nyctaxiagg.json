{
	"name": "nyctaxiagg",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "nyctaxi2016_parquet",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "sqldwgeocomplete",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dataflow1aggoutput",
						"type": "DatasetReference"
					},
					"name": "aggoutput"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "Join1"
				},
				{
					"name": "populateLatLong"
				}
			],
			"script": "\n\nsource(output(\n\t\tVendorID as integer,\n\t\ttpep_pickup_datetime as timestamp,\n\t\ttpep_dropoff_datetime as timestamp,\n\t\tpassenger_count as integer,\n\t\ttrip_distance as double,\n\t\tpickup_longitude as double,\n\t\tpickup_latitude as double,\n\t\tRatecodeID as integer,\n\t\tstore_and_fwd_flag as string,\n\t\tdropoff_longitude as double,\n\t\tdropoff_latitude as double,\n\t\tpayment_type as integer,\n\t\tfare_amount as double,\n\t\textra as double,\n\t\tmta_tax as double,\n\t\ttip_amount as double,\n\t\ttolls_amount as double,\n\t\timprovement_surcharge as double,\n\t\ttotal_amount as double\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 1000) ~> source1\nsource(output(\n\t\tGeographyID as integer,\n\t\tLatitude as double,\n\t\tLongitude as double,\n\t\tLatLong as string,\n\t\tZipcodeBKey as string,\n\t\tCounty as string,\n\t\tCity as string,\n\t\tState as string,\n\t\tCountry as string,\n\t\tZipcode as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> source2\nsource1 split(trip_distance < 5,\n\tdisjoint: false) ~> ConditionalSplit1@(shorttrips, longtrips)\nConditionalSplit1@shorttrips aggregate(groupBy(passenger_count),\n\ttotal_trips = count(tpep_pickup_datetime),\n\t\ttrip_distance = avg(trip_distance)) ~> Aggregate1\npopulateLatLong, source2 join(populateLatLong@LatLong == source2@LatLong,\n\tjoinType:'left',\n\tbroadcast: 'none')~> Join1\nConditionalSplit1@shorttrips derive(LatLong = concatWS(',',toString(round(pickup_latitude,4)), toString(round(pickup_longitude,4)))) ~> populateLatLong\nAggregate1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:[''],\n\tpartitionBy('hash', 1)) ~> aggoutput"
		}
	}
}