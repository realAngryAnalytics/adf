{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "angryadf"
		},
		"blobstagingaccount_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'blobstagingaccount'"
		},
		"sqlAdventureWorksSource_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqlAdventureWorksSource'"
		},
		"sqldwAdventureWorksDestination_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'sqldwAdventureWorksDestination'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/blobstagingaccount')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('blobstagingaccount_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlAdventureWorksSource')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('sqlAdventureWorksSource_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldwAdventureWorksDestination')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('sqldwAdventureWorksDestination_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlAdventureWorksSourceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlAdventureWorksSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqlAdventureWorksSource')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldwAdventureWorksDestTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldwAdventureWorksDestination",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sqldwAdventureWorksDestination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/bulk_copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy huge amount of data in bulk from database using external control table to store source table list with partitions for each table.\n\nWhen you want to migrate data from your data warehouse like Oracle server, Netezza server, Teradata server or SQL Server to Azure, you have to load huge amount of data from multiple tables in data sources. In most cases, data has to be further partitioned in each table so that you can load rows with multiple threads in parallel from single table.",
				"activities": [
					{
						"name": "GetPartitionList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource",
								"sqlReaderQuery": {
									"value": "@concat('select PartitionId, DestTableName, FilterQuery from ', pipeline().parameters.Control_Table_Name, ' where success_ind is null OR success_ind <> ''Y''')",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "sqldwAdventureWorksDestTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEachPartition",
						"description": "ForEach activity to get the partition list from Lookup activity and then iterate each of them to Copy activity. ",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetPartitionList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetPartitionList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "CopyOnePartition",
									"description": "Copy activity to copy each partition from source database store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 3,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "@item().FilterQuery",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowPolyBase": true,
											"writeBatchSize": 10000,
											"polyBaseSettings": {
												"rejectValue": 0,
												"rejectType": "value",
												"useTypeDefault": false
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "blobstagingaccount",
												"type": "LinkedServiceReference"
											},
											"path": "adfstagingcopydata",
											"enableCompression": true
										},
										"dataIntegrationUnits": 0
									},
									"inputs": [
										{
											"referenceName": "sqlAdventureWorksSourceTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@pipeline().parameters.Control_Table_Schema_DestTableName",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sqldwAdventureWorksDestTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "@item().DestTableName"
											}
										}
									]
								},
								{
									"name": "SetProcessingFlag",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "CopyOnePartition",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[concat('[', 'ANGRY].bulk_copy_success')]",
										"storedProcedureParameters": {
											"PartitionId": {
												"value": {
													"value": "@item().PartitionId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"TableName": {
												"value": {
													"value": "@item().DestTableName",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "sqldwAdventureWorksDestination",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "ANGRY.bulkcopycontroltable"
					},
					"Control_Table_Schema_PartitionID": {
						"type": "String",
						"defaultValue": "PartitionID"
					},
					"Control_Table_Schema_DestTableName": {
						"type": "String",
						"defaultValue": "DestTableName"
					},
					"Control_Table_Schema_FilterQuery": {
						"type": "String",
						"defaultValue": "FilterQuery"
					}
				},
				"folder": {
					"name": "bulk_copy"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqldwAdventureWorksDestTable')]",
				"[concat(variables('factoryId'), '/datasets/sqlAdventureWorksSourceTable')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldwAdventureWorksDestination')]",
				"[concat(variables('factoryId'), '/linkedServices/blobstagingaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/delta_load_w_updates')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Copy new or updated rows only from database using external control table",
				"activities": [
					{
						"name": "LookupLastWaterMark",
						"description": "Retrieve  the last high-watermark value stored in external control table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource"
							},
							"dataset": {
								"referenceName": "sqldwAdventureWorksDestTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Control_Table_Table_Name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "LookupCurrentWaterMark",
						"description": "Retrieve  the current maximum value in watermark column of source data store",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "@concat('select MAX(',pipeline().parameters.Data_Source_WaterMarkColumn, ') as NewWatermarkValue from ',pipeline().parameters.Data_Source_Table_Name)",
									"type": "Expression"
								}
							},
							"dataset": {
								"referenceName": "sqlAdventureWorksSourceTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Data_Source_Table_Name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "DeltaCopyfromDB",
						"description": "Copy activity to use query to filter the delta data by > last high-watermark and <= current high-watermark from source database, and then only copy the changes to the destination store.",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupCurrentWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupLastWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlSource",
								"sqlReaderQuery": {
									"value": "select * from \n@{pipeline().parameters.Data_Source_Table_Name} where @{pipeline().parameters.Data_Source_WaterMarkColumn} > '@{activity('LookupLastWaterMark').output.firstRow.WatermarkValue}' and @{pipeline().parameters.Data_Source_WaterMarkColumn} <= '@{activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue}'",
									"type": "Expression"
								}
							},
							"sink": {
								"type": "SqlDWSink",
								"allowPolyBase": true,
								"writeBatchSize": 10000,
								"preCopyScript": {
									"value": "@{concat('TRUNCATE TABLE ', pipeline().parameters.Data_Destination_Staging_Table_Name)}",
									"type": "Expression"
								},
								"polyBaseSettings": {
									"rejectValue": 0,
									"rejectType": "value",
									"useTypeDefault": true
								}
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "blobstagingaccount",
									"type": "LinkedServiceReference"
								},
								"path": "adfstagingcopydata",
								"enableCompression": true
							},
							"dataIntegrationUnits": 0
						},
						"inputs": [
							{
								"referenceName": "sqlAdventureWorksSourceTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Data_Source_Table_Name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "sqldwAdventureWorksDestTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": {
										"value": "@pipeline().parameters.Data_Destination_Staging_Table_Name",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "DeltaLoadFromStaging",
						"description": "Stored procedure activity to find the existing records in the destination table and delete them prior to  inserting the records from staging. ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeltaCopyfromDB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[concat('[', 'ANGRY].[delta_load_w_updates]')]",
							"storedProcedureParameters": {
								"LastModifiedDatetime": {
									"value": {
										"value": "@activity('LookupCurrentWaterMark').output.firstRow.NewWatermarkValue",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"StagingTableName": {
									"value": {
										"value": "@pipeline().parameters.Data_Destination_Staging_Table_Name",
										"type": "Expression"
									},
									"type": "String"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.Data_Destination_Table_Name",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "sqldwAdventureWorksDestination",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"Data_Source_Table_Name": {
						"type": "String",
						"defaultValue": "ANGRY.FactResellerSales"
					},
					"Data_Source_WaterMarkColumn": {
						"type": "String",
						"defaultValue": "ModifiedDate"
					},
					"Data_Destination_Table_Name": {
						"type": "String",
						"defaultValue": "ANGRY.FactResellerSales"
					},
					"Control_Table_Table_Name": {
						"type": "String",
						"defaultValue": "ANGRY.watermarktable"
					},
					"Control_Table_Column_Name": {
						"type": "String",
						"defaultValue": "WatermarkValue"
					},
					"Data_Destination_Staging_Table_Name": {
						"type": "String",
						"defaultValue": "ANGRY.FactResellerSales_Staging"
					}
				},
				"folder": {
					"name": "delta_w_updates"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqldwAdventureWorksDestTable')]",
				"[concat(variables('factoryId'), '/datasets/sqlAdventureWorksSourceTable')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldwAdventureWorksDestination')]",
				"[concat(variables('factoryId'), '/linkedServices/blobstagingaccount')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/truncate_and_reload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachLookupTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetReloadList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetReloadList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "lookup_tbl_copy",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().SourceTableName}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowPolyBase": true,
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "TRUNCATE TABLE @{item().DestTableName}",
												"type": "Expression"
											},
											"polyBaseSettings": {
												"rejectValue": 0,
												"rejectType": "value",
												"useTypeDefault": false
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "blobstagingaccount",
												"type": "LinkedServiceReference"
											},
											"path": "adfstagingcopydata",
											"enableCompression": false
										}
									},
									"inputs": [
										{
											"referenceName": "sqlAdventureWorksSourceTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{item().SourceTableName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sqldwAdventureWorksDestTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "@{item().DestTableName}"
											}
										}
									]
								},
								{
									"name": "UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "lookup_tbl_copy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "ANGRY.update_watermark",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@{item().DestTableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "sqldwAdventureWorksDestination",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetReloadList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlDWSource"
							},
							"dataset": {
								"referenceName": "sqldwAdventureWorksDestTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[concat('[', 'ANGRY].[reloadcontroltable]')]"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "ANGRY.reloadcontroltable"
					}
				},
				"folder": {
					"name": "truncate_and_reload"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqldwAdventureWorksDestTable')]",
				"[concat(variables('factoryId'), '/datasets/sqlAdventureWorksSourceTable')]",
				"[concat(variables('factoryId'), '/linkedServices/sqldwAdventureWorksDestination')]",
				"[concat(variables('factoryId'), '/linkedServices/blobstagingaccount')]"
			]
		}
	]
}