{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory Name",
			"defaultValue": "angryadf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/truncate_and_reload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEachLookupTable",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetReloadList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"typeProperties": {
							"items": {
								"value": "@activity('GetReloadList').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "lookup_tbl_copy",
									"type": "Copy",
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 1,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"typeProperties": {
										"source": {
											"type": "SqlSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().SourceTableName}",
												"type": "Expression"
											}
										},
										"sink": {
											"type": "SqlDWSink",
											"allowPolyBase": true,
											"writeBatchSize": 10000,
											"preCopyScript": {
												"value": "TRUNCATE TABLE @{item().DestTableName}",
												"type": "Expression"
											},
											"polyBaseSettings": {
												"rejectValue": 0,
												"rejectType": "value",
												"useTypeDefault": false
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "blobstagingaccount",
												"type": "LinkedServiceReference"
											},
											"path": "adfstagingcopydata",
											"enableCompression": false
										}
									},
									"inputs": [
										{
											"referenceName": "sqlAdventureWorksSourceTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@{item().SourceTableName}",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "sqldwAdventureWorksDestTable",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "@{item().DestTableName}"
											}
										}
									]
								},
								{
									"name": "UpdateWatermark",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "lookup_tbl_copy",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"typeProperties": {
										"storedProcedureName": "ANGRY.update_watermark",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@utcnow()",
													"type": "Expression"
												},
												"type": "DateTime"
											},
											"TableName": {
												"value": {
													"value": "@{item().DestTableName}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "sqldwAdventureWorksDestination",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "GetReloadList",
						"description": "Lookup activity to retrieve the list of partitions stored in the external control table.",
						"type": "Lookup",
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"typeProperties": {
							"source": {
								"type": "SqlDWSource"
							},
							"dataset": {
								"referenceName": "sqldwAdventureWorksDestTable",
								"type": "DatasetReference",
								"parameters": {
									"TableName": "[concat('[', 'ANGRY].[reloadcontroltable]')]"
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"parameters": {
					"Control_Table_Name": {
						"type": "String",
						"defaultValue": "ANGRY.reloadcontroltable"
					}
				},
				"folder": {
					"name": "truncate_and_reload"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sqldwAdventureWorksDestTable')]",
				"[concat(variables('factoryId'), '/datasets/sqlAdventureWorksSourceTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqlAdventureWorksSourceTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlAdventureWorksSource",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"type": "AzureSqlTable",
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			}
		},
		{
			"name": "[concat(parameters('factoryName'), '/sqldwAdventureWorksDestTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqldwAdventureWorksDestination",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "String"
					}
				},
				"type": "AzureSqlDWTable",
				"typeProperties": {
					"tableName": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			}
		}
	]
}